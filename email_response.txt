Subject: Finalizing Proposal: Relaxed Index Upgrade Policy

Hi all,

Thanks again for the discussion so far.  I think we have now converged on a clear and practical path forward that reflects Robert's clarifications and everyone's feedback.  Robert's key insight about distinguishing between "minimum created version" and "minimum segment version" is exactly what we needed to move forward with a clean, efficient solution.

Below is a complete proposal and the concrete changes I plan to commit.  Unless anyone feels something is still missing, I will start on the implementation and close this issue once the work is merged.

---------------------------------------------------------------------
Final Proposal:  “Lazy MIN_SUPPORTED_MAJOR”
---------------------------------------------------------------------

1. Guiding principle
   • Lucene should only force a full re-index when it is **technically required** to keep indexes correct.
   • When an upgrade is safe, users should be able to upgrade across multiple major versions without a full re-index. The upgrade path involves sequentially opening and merging the index with each intermediate major version, which is less costly than re-indexing from source data.

2. Two distinct version concepts (following Robert’s note)
   • minimum **created** major (MIN_SUPPORTED_MAJOR) – The oldest major version we promise to *open* at all.  Bumped **only** when an on-disk incompatibility, data-loss fix, or similar rare event actually prevents safe reading.
   • minimum **segment** major – Dictated by the codec readers we bundle. This remains unchanged: a Lucene release only guarantees it can read segments from the *previous* major version. An index created with an older version (e.g. v10) can be opened by a newer Lucene (e.g. v12), but its v10 segments can only be read and merged if the user first upgrades to v11.

   In other words, MIN_SUPPORTED_MAJOR answers “can the index as-created be opened?”, while codec support answers “can individual legacy segments be merged?”.  Most of the time both numbers move together but only MIN_SUPPORTED_MAJOR is user-visible.

3. Initial settings
   • When we release Lucene 11.0.0 we will set `MIN_SUPPORTED_MAJOR = 10`.
   • Future releases leave this constant untouched **unless** they introduce an incompatible format change; at that point we bump to the last compatible major (e.g. a break in 15.0.0 → set to 14).

4. No promise expansion
   • We continue to guarantee backward compatibility for **one** major, exactly as today.  The constant merely makes that promise *explicit* instead of computed as `LATEST-1`, so it can remain pinned for several majors if nothing breaks.  We still reserve the right to raise it even without a break if the maintenance burden becomes too high.

---------------------------------------------------------------------
Required Code Changes
---------------------------------------------------------------------

A. `org.apache.lucene.util.Version`
   • Adjust the existing constant
     ```java
     public static final int MIN_SUPPORTED_MAJOR = Version.LATEST.major - 1;
     ```
     so it becomes a manually-maintained value, initialised to 10 and accompanied by clear Javadoc explaining the bump policy.

B. `SegmentInfos.java` / `StandardDirectoryReader.java`
   • Change the open-time compatibility check to compare `indexCreatedVersionMajor` against the existing constant.

C. `IndexWriter.java` (addIndexes method)
   • Modify the version compatibility check in `addIndexes(Directory... dirs)` around line 3001
   • Current code: `if (segmentInfos.getIndexCreatedVersionMajor() != sis.getIndexCreatedVersionMajor())`
   • New code: `if (sis.getIndexCreatedVersionMajor() < Version.MIN_SUPPORTED_MAJOR)`
   • This allows merging segments from different major versions as long as they're >= MIN_SUPPORTED_MAJOR

D. `IndexWriterConfig.java`
   • Replace the safety check `indexCreatedVersionMajor < Version.LATEST.major - 1` with `indexCreatedVersionMajor < Version.MIN_SUPPORTED_MAJOR` so that the same central constant drives both read-time and write-time validation.

E. BW compatibility tests
   • Update `BackwardsCompatibilityTestBase` to use the constant instead of `LATEST-1`.
   • Add a unit test that fails if someone forgets to bump the constant when a real format change is introduced (asserts expected min).
   • Add tests to verify addIndexes works across compatible major versions
   • Add tests to verify appropriate error messages for incompatible versions

F. Build / release tooling
   • Add a checklist item in `dev-docs/release.md` reminding RM to review whether `MIN_SUPPORTED_MAJOR` needs a bump for the new major.

---------------------------------------------------------------------
Required Documentation Changes
---------------------------------------------------------------------

1. `CHANGES.txt` (11.0 section) – describe the new policy and how to upgrade.
2. `MIGRATE.md` – provide a worked example (10 → 14 via merges).
3. Javadoc on `Version.MIN_SUPPORTED_MAJOR` – policy, rationale, bump procedure.

Example upgrade scenario for documentation:
• Index created with Lucene 10.0 (MIN_SUPPORTED_MAJOR = 10)
• User wants to upgrade to Lucene 14.0 (assuming MIN_SUPPORTED_MAJOR still = 10)
• Path: Open with 11.0 → merge → open with 12.0 → merge → open with 13.0 → merge → open with 14.0
• Result: Index now has minSegmentLuceneVersion = 14.0 but indexCreatedVersionMajor = 10 (preserved)
• Benefit: No reindexing required, just sequential merging

---------------------------------------------------------------------
Next Steps
---------------------------------------------------------------------

• I will open a PR implementing the above (code + tests + docs).
• Please shout if you spot anything we have overlooked or disagree with the wording/policy.
• Barring new concerns I will merge in a week and close this issue.

## Summary of Benefits

This approach provides the exact benefits we were seeking:

1. **Reduced operational overhead**: Users can upgrade across multiple major versions without reindexing when safe
2. **Clear upgrade path**: Error messages clearly indicate when reindexing is required vs. when merging suffices
3. **Maintains safety**: We retain the ability to force reindexing when technically necessary
4. **No added complexity**: We're not adding new mechanisms, just being smarter about when to require reindexing
5. **Addresses the core issue**: Large indexes can be upgraded without the massive operational cost of reindexing

The key insight from Robert about distinguishing between "minimum created version" and "minimum segment version" makes this solution both elegant and practical. It allows us to provide user benefits while maintaining our ability to make necessary format changes when required.

Thanks again to Robert, Adrien, Vigya and everyone who weighed in. This collaborative approach has led to a much better solution than the original proposal.

— Mark
